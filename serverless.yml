service: patients-registration
frameworkVersion: '2'

plugins:
  - serverless-offline
  - serverless-dynamodb-local

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    seed:
      domain:
        sources:
          - table: patient
            sources: [./migrations/patients-seed.json]


provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  environment:
    PATIENT_TABLE: 'patient-${opt.stage, self:provider.stage}'

  # AWS permissions for this serverless
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${opt.region, self:provider.region}:*:table/${self:provider.environment.PATIENT_TABLE}

functions:
  listPatients:
    handler: handler.listPatients
    events:
      - httpApi: 'GET /patients'
  getPatient:
    handler: handler.getPatient
    events:
      - httpApi: 'GET /patients/{patient_id}'
  createPatient:
    handler: handler.createPatient
    events:
      - httpApi: 'POST /patients'
  updatePatient:
    handler: handler.updatePatient
    events:
      - httpApi: 'PUT /patients/{patient_id}'
  deletePatient:
    handler: handler.deletePatient
    events:
      - httpApi: 'DELETE /patients/{patient_id}'

resources:
  Resources:
    PatientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PATIENT_TABLE}
        AttributeDefinitions:
          - AttributeName: patient_id
            AttributeType: S
        KeySchema:
          - AttributeName: patient_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1